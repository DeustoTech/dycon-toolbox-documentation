{
  "0": {
    "id": "0",
    "title": "Download",
    "content": "DyCon Toolbox is open source, compatible with MATLAB 9.3 (R2017b) or later, and is freely available on Github. Direct Download Download by following link: DyCon Toolbox (.zip) Download from MATLAB Alternatively you can start using DyCon Toolbox by simply pasting the code below to your MATLAB command window &gt;&gt; unzip(&#39;https://github.com/DeustoTech/DyCon-Computational-Platform/archive/master.zip&#39;) &gt;&gt; addpath(genpath(fullfile(cd,&#39;DyCon-toolbox-master&#39;))) Download from Github If you rather prefer to clone the repository directly from Github, you can do it by typing the following command at a terminal: git clone https://github.com/DeustoTech/DyCon-Computational-Platform.git Give us your feedback Please if you find any bug or have questions, do not hesitate to contact us. You can give us your feedback through this email address (dycon-dev-group@deusto.es). Get started To get started we encourage you to visit First Steps where the basic features of DyCon Toolbox are explained. Then we suggest you to check any of our Tutorials.",
    "url": "http://localhost:4000/dycon-toolbox-documentation/posts/02-Download/",
    "relUrl": "/posts/02-Download/"
  },
  "1": {
    "id": "1",
    "title": "Dynamics definition",
    "content": "Table of Contents ode. A object of class ode is a structure that contains a all information of a ordinary differential equation. This have a dynamic equation, initial condition, time span, etc. Methods ode SetIntegrator solve ZerosControl pde1d. A object of class pde1d is a structure that contains a all information of a partial differential equation in one dimension. This have a dynamic equation, initial condition, time span, space span etc. Methods pde1d pde2d. A object of class pde2d is a structure that contains a all information of a partial differential equation in two dimension. This have a dynamic equation, initial condition, time span, space span etc. Methods pde2d pdefem. A object of class pdefem is a structure that contains a all information of a partial differential equation in two dimension in finite elements. This have a dynamic equation, initial condition, time span, space discretization, nodes and elements, etc. Methods pdefem linearode. Methods linearpde. Methods &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;ode&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;ode&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;A object of class ode is a structure that contains a all information of a ordinary differential equation. This have a dynamic equation, initial condition, time span, etc.&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;div id=&quot;odeode&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ode&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ode&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; iode = ode(Fs,Xs,Us,tspan) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Fs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;CasADi Function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;This is a function $f:R^+ times mathcal{X} times mathcal{U}$ that define the dynamics.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Xs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;It is a symbolical state vector, $x in mathcal{X}$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Us&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a symbolical control vector, $u in mathcal{U}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;tspan&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The ode is a object that can be solved with the command “solve” but this need a time span to build a answer. The number of points in time is denote by $N_t$. It is $N_t = length(tspan)$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iode&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#ode&quot;&gt;ode&lt;/a&gt;&lt;/td&gt; &lt;td&gt;ode object that contain all information of ode.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* xs = SX.sym(&#39;x&#39;,2,1); us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,xs,us},{ - xs(1) + us(1); - xs(2) + us(2)}); tspan = linspace(0,1,100); And create a object ode iode = ode(Fs,xs,us,tspan); iode iode = ode with properties: tspan: [1x100 double] ts: [1x1 casadi.SX] MassMatrix: [2x2 double] method: [] solver: [] DynamicFcn: [1x1 casadi.Function] State: [1x1 fun] Control: [1x1 fun] InitialCondition: [2x1 casadi.DM] Nt: 100 &lt;/div&gt; &lt;div id=&quot;odeSetIntegrator&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;SetIntegrator&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ode&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; SetIntegrator(iode,method) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;idyn&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#ode&quot;&gt;ode&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;dynamic object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;method&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;string&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;It is a string that can be {&lt;code class=&quot;highlighter-rouge&quot;&gt;BackwardEuler&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;RK4&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;RK8&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;casadi&lt;/code&gt;}. This parameter define the numerical schema that it will use to solve the problem&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* xs = SX.sym(&#39;x&#39;,2,1); us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,xs,us},{ [- 2*xs(1) + us(1) ; - xs(2) + us(2)] }); tspan = linspace(0,1.5,7); And create a object ode iode = ode(Fs,xs,us,tspan); iode.InitialCondition = [1;1]; u0 = ZerosControl(iode); iode.tspan = linspace(0,0.5,7); SetIntegrator(iode,&#39;RK4&#39;) xt_RK4 = solve(iode,u0) xt_RK4 = @1=1, [[@1, 0.897602, 0.805689, 0.723187, 0.649134, 0.582664, 0.523], [@1, 0.946689, 0.89622, 0.848441, 0.80321, 0.76039, 0.719853]] iode.tspan = linspace(0,0.5,7); SetIntegrator(iode,&#39;RK8&#39;) xt_RK8 = solve(iode,u0) xt_RK8 = @1=1, [[@1, 0.846482, 0.716531, 0.606531, 0.513417, 0.434598, 0.367879], [@1, 0.920044, 0.846482, 0.778801, 0.716531, 0.659241, 0.606531]] iode.tspan = linspace(0,0.5,7); SetIntegrator(iode,&#39;BackwardEuler&#39;) xt_BE = solve(iode,u0) xt_BE = @1=1, [[@1, 0.833333, 0.694444, 0.578704, 0.482253, 0.401878, 0.334898], [@1, 0.916667, 0.840278, 0.770255, 0.706067, 0.647228, 0.593292]] &lt;/div&gt; &lt;div id=&quot;odesolve&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;solve&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ode&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; xt = solve(iode,u0) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;idyn&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#ode&quot;&gt;ode&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;dynamic object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;u0&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#dm&quot;&gt;double or casadi.DM&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;control initial guess&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#dm&quot;&gt;double or casadi.DM&lt;/a&gt;&lt;/td&gt; &lt;td&gt;dynamic solution in tspan&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* xs = SX.sym(&#39;x&#39;,2,1); us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,xs,us},{ [- 2*xs(1) + us(1) ; - xs(2) + us(2)] }); tspan = linspace(0,1,10); And create a object ode iode = ode(Fs,xs,us,tspan); SetIntegrator(iode,&#39;RK4&#39;) iode.InitialCondition = [1;1]; u0 = ZerosControl(iode); xt = solve(iode,u0); xt xt = [[1, 0.867043, 0.751763, 0.65181, 0.565147, 0.490007, 0.424857, 0.368369, 0.319392, 0.276926], [1, 0.929876, 0.864669, 0.804035, 0.747653, 0.695225, 0.646473, 0.60114, 0.558985, 0.519787]] class(xt) ans = &#39;casadi.DM&#39; &lt;/div&gt; &lt;div id=&quot;odeZerosControl&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ZerosControl&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ode&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; u0 = ZerosControl(iode) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;idyn&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#ode&quot;&gt;ode&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;dynamic object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;u0&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#dm&quot;&gt;casadi.DM&lt;/a&gt;&lt;/td&gt; &lt;td&gt;zero control&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* xs = SX.sym(&#39;x&#39;,2,1); us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,xs,us},{ [- 2*xs(1) + us(1) ; - xs(2) + us(2)] }); tspan = linspace(0,1,10); And create a object ode iode = ode(Fs,xs,us,tspan); SetIntegrator(iode,&#39;RK4&#39;) u0 = ZerosControl(iode); u0 u0 = @1=0, [[@1, @1, @1, @1, @1, @1, @1, @1, @1, @1], [@1, @1, @1, @1, @1, @1, @1, @1, @1, @1]] class(u0) ans = &#39;casadi.SX&#39; &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;pde1d&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;pde1d&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;A object of class pde1d is a structure that contains a all information of a partial differential equation in one dimension. This have a dynamic equation, initial condition, time span, space span etc.&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;div id=&quot;pde1dpde1d&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;pde1d&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;pde1d&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; ipde1d = pde1d(Fs,Xs,Us,tspan,xline) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Fs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;CasADi Function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;This is a function $f:R^+ times mathcal{X} times mathcal{U}$ that define the dynamics.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Xs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;It is a symbolical state vector, $x in mathcal{X}$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Us&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a symbolical control vector, $u in mathcal{U}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;tspan&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The ode is a object that can be solved with the command “solve” but this need a time span to build a answer. The number of points in time is denote by $N_t$. It is $N_t = length(tspan)$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xline&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The number of points in time is denote by $N_x$. It is $N_x = length(xline)$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;ipde1d&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#pde1d&quot;&gt;pde1d&lt;/a&gt;&lt;/td&gt; &lt;td&gt;ode object that contain all information of pde 1d.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* xs = SX.sym(&#39;x&#39;,2,1); us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,xs,us},{ - xs(1) + us(1); - xs(2) + us(2)}); tspan = linspace(0,1,100); xline = linspace(0,1,100); And create a object ode ipde1d = pde1d(Fs,xs,us,tspan,xline); ipde1d ipde1d = pde1d with properties: xline: [1x100 double] tspan: [1x100 double] ts: [1x1 casadi.SX] MassMatrix: [2x2 double] method: [] solver: [] DynamicFcn: [1x1 casadi.Function] State: [1x1 fun] Control: [1x1 fun] InitialCondition: [2x1 casadi.DM] Nt: 100 &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;pde2d&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;pde2d&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;A object of class pde2d is a structure that contains a all information of a partial differential equation in two dimension. This have a dynamic equation, initial condition, time span, space span etc.&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;div id=&quot;pde2dpde2d&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;pde2d&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;pde2d&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; ipde1d = pde1d(Fs,Xs,Us,tspan,xline) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Fs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;CasADi Function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;This is a function $f:R^+ times mathcal{X} times mathcal{U}$ that define the dynamics.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Xs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;It is a symbolical state vector, $x in mathcal{X}$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Us&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a symbolical control vector, $u in mathcal{U}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;tspan&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The ode is a object that can be solved with the command “solve” but this need a time span to build a answer. The number of points in time is denote by $N_t$. It is $N_t = length(tspan)$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xline&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The number of points in time is denote by $N_x$. It is $N_x = length(xline)$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;yline&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The number of points in time is denote by $N_y$. It is $N_y = length(yline)$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;ipde2d&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#pde2d&quot;&gt;pde2d&lt;/a&gt;&lt;/td&gt; &lt;td&gt;ode object that contain all information of pde 2d.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a symbolical variable clear import casadi.* us = SX.sym(&#39;u&#39;,2,1); vs = SX.sym(&#39;v&#39;,2,1); ts = SX.sym(&#39;t&#39;); Define a dynamic as casadi Function Fs = casadi.Function(&#39;F&#39;,{ts,us,vs},{ - us(1) + vs(1); - us(2) + vs(2)}); tspan = linspace(0,1,100); xline = linspace(0,1,100); yline = linspace(0,1,100); And create a object ode ipde2d = pde2d(Fs,us,vs,tspan,xline,yline); ipde2d ipde2d = pde2d with properties: xline: [1x100 double] yline: [1x100 double] xms: [100x100 double] yms: [100x100 double] tspan: [1x100 double] ts: [1x1 casadi.SX] MassMatrix: [2x2 double] method: [] solver: [] DynamicFcn: [1x1 casadi.Function] State: [1x1 fun] Control: [1x1 fun] InitialCondition: [2x1 casadi.DM] Nt: 100 &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;pdefem&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;pdefem&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;A object of class pdefem is a structure that contains a all information of a partial differential equation in two dimension in finite elements. This have a dynamic equation, initial condition, time span, space discretization, nodes and elements, etc.&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;div id=&quot;pdefempdefem&quot; style=&quot;border: 1px solid blue;padding:2px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;pdefem&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;pdefem&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; ipde1d = pde1d(Fs,Xs,Us,Nodes,Elements) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:5px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Fs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;CasADi Function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;This is a function $f:R^+ times mathcal{X} times mathcal{U}$ that define the dynamics.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Xs&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;It is a symbolical state vector, $x in mathcal{X}$.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Us&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#the-sx-symbolics&quot;&gt;SX.sym&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a symbolical control vector, $u in mathcal{U}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;tspan&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;The ode is a object that can be solved with the command “solve” but this need a time span to build a answer. The number of points in time is denote by $N_t$. It is $N_t = length(tspan)$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nodes&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Mesh nodes, specified as a matrix of real numbers. The matrix size is 2-by-Nnodes for a 2-D case and 3-by-Nnodes for a 3-D case. Nnodes is the number of nodes in the mesh. Node j has x, y, and z coordinates in column j of nodes.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Elements&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Mesh elements, specified as an integer matrix with 3, and Nelements columns, where Nelements is the number of elements in the mesh. Linear planar mesh or linear mesh on the geometry surface has size 3-by-Nelements. Each column of elements contains the indices of the triangle corner nodes for a surface element. In this case, the resulting geometry does not contain a full mesh. Create the mesh using the &lt;a href=&quot;https://es.mathworks.com/help/pde/ug/pde.pdemodel.geometryfrommesh.html&quot;&gt;generateMesh&lt;/a&gt; function.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;ipdefem&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics/#pdefem&quot;&gt;pdefem&lt;/a&gt;&lt;/td&gt; &lt;td&gt;ode object that contain all information of pde in finite elements.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; Create a points an elements t = linspace(pi/30,2*pi,30); pgon = polyshape({[0.5*sin(t)]},{[0.5*cos(t)]}); tr = triangulation(pgon); % tnodes = tr.Points&#39;; telements = tr.ConnectivityList&#39;; With these we can create a FEM matrices with help to MATLAB PDE Toolbox model = createpde(); geometryFromMesh(model,tnodes,telements); Define Equation applyBoundaryCondition(model,&#39;neumann&#39;,&#39;Edge&#39;,1:model.Geometry.NumEdges,&#39;g&#39;,0); specifyCoefficients(model,&#39;m&#39;,0,&#39;d&#39;,0,&#39;c&#39;,1,&#39;a&#39;,0,&#39;f&#39;,0); and generate mesh hmax = 0.05; generateMesh(model,&#39;Hmax&#39;,hmax,&#39;GeometricOrder&#39;,&#39;linear&#39;,&#39;Hgrad&#39;,2); Get a Finite elements Matrices FEM = assembleFEMatrices(model,&#39;stiff-spring&#39;); Ns = length(FEM.Fs); import casadi.* % Us = SX.sym(&#39;w&#39;,Ns,1); Vs = SX.sym(&#39;v&#39;,Ns,1); ts = SX.sym(&#39;t&#39;); Define the dynamic Fs = casadi.Function(&#39;f&#39;,{ts,Us,Vs},{ FEM.Fs + FEM.Ks*Us + Vs }); % tspan = linspace(0,2,50); % idyn = pdefem(Fs,Us,Vs,tspan,tnodes,tnodes); SetIntegrator(idyn,&#39;RK4&#39;) Initial Condition xms = Nodes(1,:)&#39; ;yms = Nodes(2,:)&#39; ; % radial coordinates rms = sqrt(xms.^2+yms.^2); thms = atan2(yms,xms); U0 = exp((-xms.^2-yms.^2)/0.25^2); idyn.InitialCondition = U0(:); % Vt = ZerosControl(idyn); Wt = solve(idyn,Vt); % Wt Wt = [[0.0183156, 0.0179932, 0.0176703, ..., -0.0567949, -0.0654909, -0.0753068], [0.0182246, 0.0178072, 0.0173858, ..., -0.0430701, -0.0483894, -0.0542836], [0.0185783, 0.018069, 0.0175525, ..., -0.0577603, -0.0643154, -0.0715892], ..., [0.141174, 0.140772, 0.140377, ..., 0.447323, 0.49929, 0.559693], [0.122455, 0.122056, 0.12166, ..., 0.203015, 0.218401, 0.236377], [0.102459, 0.102, 0.101541, ..., 0.139265, 0.149296, 0.161212]] &lt;/div&gt; &lt;/div&gt; &lt;hr&gt; &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;linearode&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;linearode&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;/div&gt; &lt;hr&gt; &lt;hr&gt; &lt;div style=&quot;border: 2px solid red;padding:2px&quot;&gt; &lt;div id=&quot;linearpde&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;linearpde&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;/div&gt; &lt;hr&gt;",
    "url": "http://localhost:4000/dycon-toolbox-documentation/posts/03-Dynamics/",
    "relUrl": "/posts/03-Dynamics/"
  },
  "2": {
    "id": "2",
    "title": "Optimal Control Problems",
    "content": "Table of Contents ocp. A object of class ode is a structure that contains a all information of a ordinary differential equation. This have a dynamic equation, initial condition, time span, etc. $$ min_{u in mathcal{U}} bigg[ psi(x(T)) + int_0^T L(t,x(t),u(t)) dt bigg] text{subject to:} dot{x} = f(t,x,u)$$ Methods ocp ArmijoGradient IpoptSolver SteptestGradientDescent ClassicalGradient ConjugateGradient &lt;hr&gt; &lt;div style=&quot;border: 5px solid red;padding:2px&quot;&gt; &lt;div id=&quot;ocp&quot;&gt;&lt;h1&gt;&lt;b style=&quot;color:red&quot;&gt;Class:: &lt;/b&gt;&lt;b&gt;ocp&lt;/b &gt;&lt;/h1&gt;&lt;/div&gt; &lt;p&gt;A object of class ode is a structure that contains a all information of a ordinary differential equation. This have a dynamic equation, initial condition, time span, etc. $$ min_{u in mathcal{U}} bigg[ psi(x(T)) + int_0^T L(t,x(t),u(t)) dt bigg] text{subject to:} dot{x} = f(t,x,u)$$&lt;/p&gt; &lt;!-- BUCLE METHODS --&gt; &lt;div id=&quot;ocpocp&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; iocp = ocp(idynamics,PathCostFcn,FinalCostFcn) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;idynamics&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/03-Dynamics&quot;&gt;{ode,pde1d,pde2d,pdefem}&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;This is a object { &lt;code class=&quot;highlighter-rouge&quot;&gt;ode&lt;/code&gt; ,&lt;code class=&quot;highlighter-rouge&quot;&gt;pde1d&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;pde2d&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;pdefem&lt;/code&gt;} that represent the dynamic. Inside this object we have a time span, dynamics equation, initial condition, etc.&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;PathCostFcn&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;casadi function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a casadi function that $ L: mathbb{R}^+ times mathcal{X} times mathcal{U} rightarrow mathbb{R}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;FinalCostFcn&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://web.casadi.org/docs/#function-objects&quot;&gt;casadi function&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;it is a casadi function that $ psi: mathcal{X} rightarrow mathbb{R}$&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;/dycon-toolbox-documentation/posts/04-OptimalControlProblems/#ocp&quot;&gt;&lt;p&gt;ode&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;ocp object that contain all information of optimal control problem.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; clear all;close all import casadi.* Xs = SX.sym(&#39;x&#39;,2,1); Us = SX.sym(&#39;u&#39;,2,1); ts = SX.sym(&#39;t&#39;); % A = [ -2 +1; +1 -2]; B = [1 0; 0 1]; EvolutionFcn = Function(&#39;f&#39;,{ts,Xs,Us},{ A*Xs + B*Us }); % tspan = linspace(0,2,10); iode = ode(EvolutionFcn,Xs,Us,tspan); SetIntegrator(iode,&#39;RK4&#39;) iode.InitialCondition = [1;2]; epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(iode,PathCost,FinalCost) iocp = ocp with properties: DynamicSystem: [1x1 ode] CostFcn: [1x1 CostFcn] VariableTime: 0 constraints: [1x1 constraints] TargetState: [] Hamiltonian: [0x0 casadi.Function] AdjointStruct: [1x1 AdjointStruct] ControlGradient: [1x1 casadi.Function] &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;ocpArmijoGradient&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ArmijoGradient&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess,&#39;MaxIter&#39;,MaxIter) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;ocp&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Optimal Control Problems object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uguess&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;4&quot;&gt;OPTIONAL INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Default&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MaxIter&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;50&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal Control&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal State&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; import casadi.* A = [-2 1; 1 -2]; B = [1;0]; % tspan = linspace(0,1,7); idyn = linearode(A,B,tspan); idyn.InitialCondition = [1;2]; ts = idyn.ts; Xs = idyn.State.sym; Us = idyn.Control.sym; % epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(idyn,PathCost,FinalCost); uguess = tspan; [uopt,xopt] = ArmijoGradient(iocp,uguess); =================================================================================================== | iter | norm(dJ/du) | abs(Jc-Ja)/Jc | LengthStep | J | Distance2Target | =================================================================================================== | 008 | 2.017e+03 | 1.780e-01 | 2.50e-04 | 1.13750e+03 | NaN | | 012 | 1.651e+03 | 2.549e-01 | 2.50e-04 | 6.18609e+02 | NaN | | 016 | 2.011e+03 | 1.540e-01 | 1.00e-03 | 4.12580e+02 | NaN | | 020 | 3.068e+03 | 4.962e-02 | 1.00e-03 | 3.26251e+02 | NaN | | 024 | 8.769e+02 | 8.368e-02 | 1.00e-03 | 2.07381e+02 | NaN | | 028 | 8.176e+02 | 1.259e-01 | 1.00e-03 | 1.28015e+02 | NaN | | 032 | 1.172e+03 | 7.778e-02 | 1.00e-03 | 1.02105e+02 | NaN | | 036 | 3.997e+02 | 1.316e-01 | 2.50e-04 | 8.07760e+01 | NaN | | 040 | 4.187e+02 | 2.306e-02 | 1.00e-03 | 6.74948e+01 | NaN | =================================================================================================== | iter | norm(dJ/du) | abs(Jc-Ja)/Jc | LengthStep | J | Distance2Target | =================================================================================================== | 048 | 1.864e+02 | 3.809e-02 | 2.50e-04 | 5.13924e+01 | NaN | | 052 | 1.509e+02 | 3.159e-02 | 2.50e-04 | 4.71590e+01 | NaN | | 056 | 1.803e+02 | 1.423e-02 | 1.00e-03 | 4.55183e+01 | NaN | | 060 | 8.734e+01 | 8.959e-03 | 1.00e-03 | 4.47686e+01 | NaN | | 064 | 7.475e+01 | 1.117e-02 | 2.50e-04 | 4.39292e+01 | NaN | | 068 | 5.289e+01 | 3.286e-04 | 2.50e-04 | 4.35600e+01 | NaN | | 072 | 9.023e+01 | 2.091e-03 | 1.00e-03 | 4.32197e+01 | NaN | | 076 | 3.367e+01 | 1.155e-03 | 1.00e-03 | 4.31266e+01 | NaN | | 080 | 2.741e+01 | 3.512e-05 | 2.50e-04 | 4.30802e+01 | NaN | =================================================================================================== | iter | norm(dJ/du) | abs(Jc-Ja)/Jc | LengthStep | J | Distance2Target | =================================================================================================== Mininum Length Step have been achieve !! uopt uopt = -7.9370 -8.1077 -7.8352 -6.7968 -4.4915 -0.1483 7.4126 xopt xopt = 1.0000 -0.0772 -0.9118 -1.4622 -1.6301 -1.2395 -0.0019 2.0000 1.4904 1.0038 0.5701 0.2238 0.0129 0.0094 &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;ocpIpoptSolver&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;IpoptSolver&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = IpoptSolver(iocp,uguess) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = IpoptSolver(iocp,uguess,&#39;Integrator&#39;,Integrator) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;ocp&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Optimal Control Problems object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uguess&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Integrator&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;String&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Integrator define the numerical schema in time. This variable must be: &lt;code class=&quot;highlighter-rouge&quot;&gt;BackwardEuler&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;ForwardEuler&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;rk4&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;rk5&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CrankNicolson&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;rk8&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;SemiLinearBackwardEuler&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal Control&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal State&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; import casadi.* A = [-2 1; 1 -2]; B = [1;0]; % tspan = linspace(0,1,7); idyn = linearode(A,B,tspan); idyn.InitialCondition = [1;2]; ts = idyn.ts; Xs = idyn.State.sym; Us = idyn.Control.sym; % epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(idyn,PathCost,FinalCost); uguess = tspan; [uopt,xopt] = IpoptSolver(iocp,uguess); This is Ipopt version 3.12.3, running with linear solver mumps. NOTE: Other linear solvers might be more efficient (see Ipopt documentation). Number of nonzeros in equality constraint Jacobian...: 62 Number of nonzeros in inequality constraint Jacobian.: 0 Number of nonzeros in Lagrangian Hessian.............: 9 Total number of variables............................: 21 variables with only lower bounds: 0 variables with lower and upper bounds: 0 variables with only upper bounds: 0 Total number of equality constraints.................: 14 Total number of inequality constraints...............: 0 inequality constraints with only lower bounds: 0 inequality constraints with lower and upper bounds: 0 inequality constraints with only upper bounds: 0 iter objective inf_pr inf_du lg(mu) ||d|| lg(rg) alpha_du alpha_pr ls 0 2.0000338e+04 1.00e+00 1.33e+01 -1.0 0.00e+00 - 0.00e+00 0.00e+00 0 1 2.1420978e+01 3.33e-16 1.66e-14 -1.0 5.90e+00 - 1.00e+00 1.00e+00f 1 Number of Iterations....: 1 (scaled) (unscaled) Objective...............: 1.0710489227567338e-01 2.1420978455134676e+01 Dual infeasibility......: 1.6577017536434369e-14 3.3154035072868737e-12 Constraint violation....: 3.3306690738754696e-16 3.3306690738754696e-16 Complementarity.........: 0.0000000000000000e+00 0.0000000000000000e+00 Overall NLP error.......: 1.6577017536434369e-14 3.3154035072868737e-12 Number of objective function evaluations = 2 Number of objective gradient evaluations = 2 Number of equality constraint evaluations = 2 Number of inequality constraint evaluations = 0 Number of equality constraint Jacobian evaluations = 2 Number of inequality constraint Jacobian evaluations = 0 Number of Lagrangian Hessian evaluations = 1 Total CPU secs in IPOPT (w/o function evaluations) = 0.006 Total CPU secs in NLP function evaluations = 0.001 EXIT: Optimal Solution Found. t_proc [s] t_wall [s] n_eval nlp_f 3.3e-05 3.4e-05 2 nlp_g 5.8e-05 5.8e-05 2 nlp_grad_f 0.000101 0.0001 3 nlp_hess_l 0.00807 6.2e-05 1 nlp_jac_g 0.000236 0.00024 3 solver 0.0208 0.00761 1 Elapsed time is 0.022389 seconds. uopt uopt = -5.5768 -5.6623 -5.5679 -4.7070 -2.4409 2.3186 5.4928 xopt xopt = 1.0000 0.1623 -0.5028 -0.9714 -1.1358 -0.7915 -0.0010 2.0000 1.5116 1.0554 0.6485 0.3127 0.0857 0.0046 &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;ocpSteptestGradientDescent&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;SteptestGradientDescent&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = SteptestGradientDescent(iocp,uguess) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = SteptestGradientDescent(iocp,uguess,&#39;MaxIter&#39;,MaxIter) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = SteptestGradientDescent(iocp,uguess,&#39;InitialLengthStep&#39;,InitialLengthStep) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;ocp&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Optimal Control Problems object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uguess&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal Control&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal State&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; import casadi.* A = [-2 1; 1 -2]; B = [1;0]; % tspan = linspace(0,1,7); idyn = linearode(A,B,tspan); idyn.InitialCondition = [1;2]; ts = idyn.ts; Xs = idyn.State.sym; Us = idyn.Control.sym; % epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(idyn,PathCost,FinalCost); uguess = tspan; [uopt,xopt] = SteptestGradientDescent(iocp,uguess); iteration: 005 | error: 3.672e+03 | LengthStep: 8.705e-04 | J: 1.234e+03 | Distance2Target: NaN iteration: 010 | error: 2.642e+02 | LengthStep: 2.640e-04 | J: 5.972e+01 | Distance2Target: NaN iteration: 015 | error: 1.706e+02 | LengthStep: 1.358e-04 | J: 5.118e+01 | Distance2Target: NaN iteration: 020 | error: 3.506e+01 | LengthStep: 1.806e-04 | J: 4.304e+01 | Distance2Target: NaN iteration: 025 | error: 2.688e+01 | LengthStep: 2.964e-06 | J: 4.304e+01 | Distance2Target: NaN iteration: 030 | error: 2.658e+01 | LengthStep: 3.377e-07 | J: 4.304e+01 | Distance2Target: NaN iteration: 035 | error: 2.655e+01 | LengthStep: 4.453e-08 | J: 4.304e+01 | Distance2Target: NaN Mininum Length Step have been achive !! uopt uopt = -7.9333 -8.1012 -7.8269 -6.7884 -4.4855 -0.1486 7.3999 xopt xopt = 1.0000 -0.0763 -0.9101 -1.4598 -1.6275 -1.2375 -0.0019 2.0000 1.4905 1.0041 0.5706 0.2245 0.0137 0.0100 &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;ocpClassicalGradient&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ClassicalGradient&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess,&#39;MaxIter&#39;,MaxIter) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;ocp&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Optimal Control Problems object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uguess&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal Control&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal State&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; import casadi.* A = [-2 1; 1 -2]; B = [1;0]; % tspan = linspace(0,1,7); idyn = linearode(A,B,tspan); idyn.InitialCondition = [1;2]; ts = idyn.ts; Xs = idyn.State.sym; Us = idyn.Control.sym; % epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(idyn,PathCost,FinalCost); uguess = tspan; [uopt,xopt] = ClassicalGradient(iocp,uguess); iteration: 005 | error: 2.525e+03 | LengthStep: 1.000e-04 | J: 1.981e+03 | Distance2Target: NaN iteration: 010 | error: 2.253e+03 | LengthStep: 1.000e-04 | J: 1.688e+03 | Distance2Target: NaN iteration: 015 | error: 2.086e+03 | LengthStep: 1.000e-04 | J: 1.453e+03 | Distance2Target: NaN iteration: 020 | error: 1.933e+03 | LengthStep: 1.000e-04 | J: 1.252e+03 | Distance2Target: NaN iteration: 025 | error: 1.790e+03 | LengthStep: 1.000e-04 | J: 1.079e+03 | Distance2Target: NaN iteration: 030 | error: 1.658e+03 | LengthStep: 1.000e-04 | J: 9.315e+02 | Distance2Target: NaN iteration: 035 | error: 1.536e+03 | LengthStep: 1.000e-04 | J: 8.046e+02 | Distance2Target: NaN iteration: 040 | error: 1.423e+03 | LengthStep: 1.000e-04 | J: 6.957e+02 | Distance2Target: NaN iteration: 045 | error: 1.318e+03 | LengthStep: 1.000e-04 | J: 6.024e+02 | Distance2Target: NaN iteration: 050 | error: 1.221e+03 | LengthStep: 1.000e-04 | J: 5.223e+02 | Distance2Target: NaN uopt uopt = [[-4.66594, -4.75716, -4.63036, -4.11885, -2.96299, -0.762059, 3.09807]] xopt xopt = [[1, 0.354971, -0.164069, -0.534352, -0.705436, -0.587689, -0.0341006], [2, 1.54437, 1.13777, 0.786533, 0.501721, 0.302829, 0.222859]] &lt;/div&gt; &lt;hr&gt; &lt;div id=&quot;ocpConjugateGradient&quot; style=&quot;border: 2px solid blue;padding:10px&quot;&gt; &lt;div style=&quot;display:flex&quot;&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;h3 &gt;&lt;b style=&quot;color:blue&quot;&gt;Method::&lt;/b&gt;&lt;b&gt;ConjugateGradient&lt;/b&gt; of &lt;b style=&quot;color:red&quot;&gt;Class::&lt;/b&gt;&lt;b&gt;ocp&lt;/b&gt;&lt;/h3&gt; &lt;/div&gt; &lt;div style=&quot;padding-left:auto; width: 100%;&quot; &gt; &lt;p style=&quot;text-align: right;&quot;&gt;&lt;a href=&quot;&quot;&gt;Index&amp;#10548;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- SYNTAX --&gt; &lt;h4&gt;Syntax&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess) &lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt; [uopt,xopt] = ArmijoGradient(iocp,uguess,&#39;MaxIter&#39;,MaxIter) &lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- INTERFACE --&gt; &lt;h4&gt;Interface&lt;/h4&gt; &lt;div style=&quot;display:block&quot; align=&quot;center&quot; vertical-align=&quot;top&quot;&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th style=&quot;text-align:center;background-color:#92354f93&quot;colspan=&quot;3&quot;&gt;INPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;iocp&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;ocp&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;p&gt;Optimal Control Problems object&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uguess&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;double&lt;/a&gt;&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div style=&quot;padding:10px&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th style=&quot;background-color:#92354f93;text-align:center&quot;colspan=&quot;3&quot;&gt;OUTPUTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Class&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;uopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal Control&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;xopt&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;&quot;&gt;&lt;p&gt;double&lt;/p&gt; &lt;/a&gt;&lt;/td&gt; &lt;td&gt;Optimal State&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- EXAMPLES --&gt; &lt;h4&gt;Example&lt;/h4&gt; import casadi.* A = [-2 1; 1 -2]; B = [1;0]; % tspan = linspace(0,1,7); idyn = linearode(A,B,tspan); idyn.InitialCondition = [1;2]; ts = idyn.ts; Xs = idyn.State.sym; Us = idyn.Control.sym; % epsilon = 1e4; PathCost = Function(&#39;L&#39; ,{ts,Xs,Us},{ Us&#39;*Us }); FinalCost = Function(&#39;Psi&#39;,{Xs} ,{ epsilon*(Xs&#39;*Xs) }); iocp = ocp(idyn,PathCost,FinalCost); uguess = tspan; [uopt,xopt] = ConjugateGradient(iocp,uguess); iteration: 005 | error: 2.473e+03 | norm(dJ): 2.473e+03 | LengthStep: +2.762e-07 | beta: 1.093e+00 | J: 1.9944e+03 | Distance2Target: NaN iteration: 010 | error: 2.997e+03 | norm(dJ): 2.997e+03 | LengthStep: +1.976e-07 | beta: 1.073e+00 | J: 1.9937e+03 | Distance2Target: NaN iteration: 015 | error: 3.521e+03 | norm(dJ): 3.521e+03 | LengthStep: +1.609e-07 | beta: 1.063e+00 | J: 1.9930e+03 | Distance2Target: NaN iteration: 020 | error: 4.065e+03 | norm(dJ): 4.065e+03 | LengthStep: +1.405e-07 | beta: 1.057e+00 | J: 1.9922e+03 | Distance2Target: NaN iteration: 025 | error: 4.638e+03 | norm(dJ): 4.638e+03 | LengthStep: +1.278e-07 | beta: 1.053e+00 | J: 1.9913e+03 | Distance2Target: NaN iteration: 030 | error: 5.248e+03 | norm(dJ): 5.248e+03 | LengthStep: +1.195e-07 | beta: 1.049e+00 | J: 1.9902e+03 | Distance2Target: NaN iteration: 035 | error: 5.897e+03 | norm(dJ): 5.897e+03 | LengthStep: +1.138e-07 | beta: 1.047e+00 | J: 1.9889e+03 | Distance2Target: NaN iteration: 040 | error: 6.586e+03 | norm(dJ): 6.586e+03 | LengthStep: +1.098e-07 | beta: 1.044e+00 | J: 1.9874e+03 | Distance2Target: NaN iteration: 045 | error: 7.312e+03 | norm(dJ): 7.312e+03 | LengthStep: +1.070e-07 | beta: 1.042e+00 | J: 1.9855e+03 | Distance2Target: NaN iteration: 050 | error: 8.066e+03 | norm(dJ): 8.066e+03 | LengthStep: +1.049e-07 | beta: 1.039e+00 | J: 1.9833e+03 | Distance2Target: NaN uopt uopt = -2.6217 -2.6272 -2.5285 -2.2421 -1.6369 -0.5107 1.4475 xopt xopt = 1.0000 0.6188 0.3006 0.0606 -0.0738 -0.0560 0.1892 2.0000 1.5773 1.2206 0.9230 0.6830 0.5053 0.4026 &lt;/div&gt; &lt;hr&gt; &lt;/div&gt; &lt;hr&gt;",
    "url": "http://localhost:4000/dycon-toolbox-documentation/posts/04-OptimalControlProblems/",
    "relUrl": "/posts/04-OptimalControlProblems/"
  },
  "3": {
    "id": "3",
    "title": "Examples",
    "content": "One of the great contributions of DyCon Toolbox are the examples provided by the team of the Chair of Computational Mathematics. These examples are on the DyCon Blog web platform, where the Chair of Computational Mathematics team publish different software tutorials including DyCon toolbox tutorials. The Optimal control on the Kuramoto adaptative coupling model with DyCon Toolbox In this DyCon Toolbox tutorial, we present how to use OptimaControl enviroment to control a consensus that models the complex emergent dynamics over a given network. read more ... Simultaneous Control with DyCon Toolbox In this tutorial we will present a simultaneous control problem in a linear system dependent on parameters. We will use the MATLAb DyCon Toolbox library. read more ... Stabilization of a double pendulum on a cart with DyCon Toolbox In this blog post, we consider a double pendulum on a cart and we solve the problem of swinging up the pendulum from the downward position to the upward position using optimal control techniques. read more ... Control for a semilinear heat equation and analogies with a collective behavior model In this tutorial we will apply the DyCon toolbox to find a control to the semi-discrete semi-linear heat equation. read more ... Simulation of Fractional Heat Equation In this tutorial, we show the simulation of heat fractional equation read more ...",
    "url": "http://localhost:4000/dycon-toolbox-documentation/posts/05-Examples/",
    "relUrl": "/posts/05-Examples/"
  },
  "5": {
    "id": "5",
    "title": "Home",
    "content": "DYCON TOOLBOX MATLAB library for non-linear optimal control problems The DyCon Toolbox is a MATLAB library for analyzing both linear and non-linear optimal control problems. It uses CasADi-based automatic differentiation to compute all derivatives necessary for the optimization process. The DyCon Toolbox has a high-level syntax, which allows for an easy definition of the user’s control problem, and thus to its quick implementation. Moreover, the user may freely and easily tune the optimization algorithms in view of speeding-up the computation process. The DyCon Toolbox provides two different approaches for tackling a control problem: Direct method approach, which consists in discretizing both state and control. This reduces the original control problem to a nonlinear optimization problem (nonlinear programming). In this case, DyCon Toolbox provides a solution to the problem through optimization in IPOPT. Indirect method approach, which consists in numerically solving the adjoint problem backwards in time, and computing the functional derivative of the problem. Gradient descent-based methods can then be used to obtain the optimal control. Although direct methods are more common in the control community, when the problem is high dimensional, indirect methods are more efficient. The DyCon Toolbox unifies the definition of control problems so that they can be solved with the adequate method. FEATURES Sparse symbolic variables and automatic differentiation via CasADi Direct method using Ipopt Solver Indirect methods implemented (Pontryagin’s maximum principle) Compatible with MATLAB PDE Toolbox Easy to implement a new optimal control problems Many numerical schemes already implemented (Runge Kutta methods) A simple example The simultaneous optimal control problem is defined as: subject to: where: Numerical Implementation We first import the CasAdi library in order to create symbolic variables import casadi.* M = 50; nu = linspace(1,6,M); Then we create the matrices of linear dynamics. [A,B] = GenMatSim(nu); With these matrices we create the ode object % define the time span Nt = 500;T = 0.8; tspan = linspace(0,T,Nt); % create linear dynamic object iode = linearode(A,B,tspan); % set initial condition Y0 = ones(2, 1); iode.InitialCondition = repmat(Y0,M,1); then we create the optimal control problem % Get Symbolical variable Ys = iode.State.sym; Us = iode.Control.sym; ts = SX.sym(&#39;t&#39;); %% &lt;= Create a symbolical time % Set Target YT = zeros(2*M, 1); % PathCost = casadi.Function(&#39;L&#39; ,{ts,Ys,Us},{ (1/2)*(Us&#39;*Us) }); FinalCost = casadi.Function(&#39;Psi&#39;,{Ys} ,{ 1e7*((Ys-YT).&#39;*(Ys-YT)) }); % Create the optimal control iocp = ocp(iode,PathCost,FinalCost); We solve the Optimal Control Problem with an Ipopt solver U0 = ZerosControl(iode); % &lt;= Control initial guess [Uopt ,Yopt] = IpoptSolver(iocp,U0); This is Ipopt version 3.12.3, running with linear solver mumps. NOTE: Other linear solvers might be more efficient (see Ipopt documentation). Number of nonzeros in equality constraint Jacobian...: 199700 Number of nonzeros in inequality constraint Jacobian.: 0 Number of nonzeros in Lagrangian Hessian.............: 600 Total number of variables............................: 50500 variables with only lower bounds: 0 variables with lower and upper bounds: 0 variables with only upper bounds: 0 iter objective inf_pr inf_du lg(mu) ||d|| lg(rg) alpha_du alpha_pr ls 0 1.0000000e+09 1.12e-02 7.88e+00 -1.0 0.00e+00 - 0.00e+00 0.00e+00 0 1 4.0934345e+06 1.26e-13 5.63e-09 -1.0 1.66e+02 - 1.00e+00 1.00e+00f 1 Number of Iterations....: 1 ... EXIT: Optimal Solution Found. t_proc [s] t_wall [s] n_eval nlp_f 0.000381 0.00038 2 nlp_g 0.0042 0.0042 2 nlp_grad_f 0.00167 0.00167 3 nlp_hess_l 0.00331 0.00332 1 nlp_jac_g 0.026 0.026 3 solver 1.48 1.36 1 Elapsed time is 3.853462 seconds. We can compute the free solution Yfree = solve(iode,U0*0); Yfree = full(Yfree); Visualization fig = figure(); %% plotSimu(tspan,Yfree,Yopt,Uopt,M) Figure 1. The different colors represent the dynamic system under different parameters. It can be seen how the same control is obtained acting for all the dynamic systems is capable of driving the systems to the target.",
    "url": "http://localhost:4000/dycon-toolbox-documentation/",
    "relUrl": "/"
  }
  
}
