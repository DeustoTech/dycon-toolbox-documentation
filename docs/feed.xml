<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DyCon Platform</title>
    <description>This MATLAB software is dedicated to the development and learning of control problems for applied mathematics.</description>
    <link>https://DeustoTech.github.iodycon-platform-documentation/</link>
    <atom:link href="https://DeustoTech.github.iodycon-platform-documentation/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 04 Oct 2018 10:17:49 +0200</pubDate>
    <lastBuildDate>Thu, 04 Oct 2018 10:17:49 +0200</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>WKB expasion of fractional Schrodinger Equation</title>
        <description>In the particular case under analysis, the construction that we obtain is then applied to the study  of controllability properties for the one dimensional fractional Schrodinger equation.

With highly oscillatory initial datum

Nx = 100;
L = 1;
hx = (2*L)/(Nx+1);


Now, we can be define the function_handle u0, from before data.

x0 = 0;
fr = pi^2/16;
gamma = hx^(-0.9);


u0 = @(x) exp(-0.5*gamma*(x-x0).^2).*exp(1i*fr*x/hx);


Can see the representation of initial Datum

fig = gcf;
set(gcf,'Units','pixels','Position',[427 306 712 284])
%
x = -L:hx:L;
%
subplot(1,3,1)
plot(x,abs(u0(x)))
title('|u_0(x)|')
xlabel('x'); ylabel('u(x)');
%
subplot(1,3,2)
plot(x,real(u0(x)))
title('real(u_0(x))')
xlabel('x'); ylabel('u(x)');

%
subplot(1,3,3)
plot(x,imag(u0(x)))
title('img(u_0(x))')
xlabel('x'); ylabel('u(x)');
%
format_plot(fig)




Solution for s = 1/2

To solve this equation, Need define the next parameters;

s   = 0.5  % Laplacian Order
L          % x in (-L , L)
Nx         % Number of points in space
T   = 5    % Final time



s =

    0.5000


L =

     1


Nx =

   100


T =

     5




And u0 is the function_handle, that have showed before. Now call the function fractional_schr to solve the equation.

[x,t,u] = fractional_schr(s,L,Nx,T,u0);


Obtain the in u variable. Now we can see a graphical interpretation

[X ,T] = meshgrid(x,t);
%
clf
mesh(X,T,u');
format_plot(gcf);view(0,90)
xlabel('x'); ylabel('t'); title('Ray Evolution');




For last, if you type “animation(x,t,u)”, in MATLAB console. You can see the evolution in time of this wave.



</description>
        <pubDate>Sat, 21 Jul 2018 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.iodycon-platform-documentation/tutorials/wp05/P0001-T</link>
        <guid isPermaLink="true">https://DeustoTech.github.iodycon-platform-documentation/tutorials/wp05/P0001-T</guid>
        
        
        <category>Tutorials</category>
        
        <category>WP05</category>
        
      </item>
    
      <item>
        <title>Average Control by classical gradient step method</title>
        <description>In this work, we address the optimal control of parameter-dependent systems. We introduce the notion of averaged control in which the quantity of interest is the average of the states with respect to the parameter family 

In this case $\nu_i$ are:

nu = 1:0.5:6



nu =

  Columns 1 through 7

    1.0000    1.5000    2.0000    2.5000    3.0000    3.5000    4.0000

  Columns 8 through 11

    4.5000    5.0000    5.5000    6.0000




And save in K, the number of values

K = length(nu);


Where the finite dimensional linear control system is:



We can, define the initial state of all ode’s

N = 3; % dimension of vector state
x0 = ones(N, 1);


Also, need define a initial control, that will be evolve

dt = 0.02;
t0 = 0; T  = 1;
span = (t0:dt:T);
%
u = zeros(length(span),1);


%Moreover, we can define the matrix A's and B's, that determine the problem
Am = -triu(ones(N))



Am =

    -1    -1    -1
     0    -1    -1
     0     0    -1




Bm = zeros(N, 1);
Bm(N) = 1



Bm =

     0
     0
     1




So, we can create these edo’s in variable primal_odes.

primal_odes = zeros(1,K,'ode');
for index = 1:K
    A = Am + (nu(index) - 1 )*diag(diag(Am));
    %
    primal_odes(index) = ode(A,'B',Bm);
    % all have the same control
    primal_odes(index).u  = u;
    % time intervals
    primal_odes(index).span = span;
    % initial state
    primal_odes(index).x0 = x0;
end


So, we have a $K$ ordinary differential equations

primal_odes



primal_odes = 

  1x11 ode array with properties:

    A
    B
    u
    x0
    x
    span
    xend




To solve average control problem to x0; in this case:

xt = ones(N, 1)



xt =

     1
     1
     1




we can solve the minimization problem



We can use the classical gradient descent method based on the adjoint methodology, and obtain the corresponding adjoint system for 1,



The same way that before, we define the adjoints problems

adjoint_odes = zeros(1,K,'ode');
for index = 1:K
    A = primal_odes(index).A';
    adjoint_odes(index) = ode(A);
    % all have the same control
    adjoint_odes(index).u = u;
    % time intervals
    adjoint_odes(index).span = span;
end


However the initial state  adjoint_odes(index).x0 hasn’t been assign. This initial state will be assign in every step of solution.

To minimize the functional, $\mathcal{J}\left( u\right)$, we take the steepest descent direction given by



We process to solve the problem of classical gradient descent

gamma = 1;
beta  = 1e-3;
tol   = 1e-8;  % Tolerance
error = Inf;
MaxIter = 50;
iter = 0;
xhistory = {}; uhistory = {};  error_history = [];    % array here we will save the evolution of average vector states
while (error &amp;gt; tol &amp;amp;amp;&amp;amp;amp; iter &amp;lt; MaxIter)
    iter = iter + 1;
    % solve primal problem
    % ====================
    solve(primal_odes);
    % calculate mean state final vector of primal problems
    xMend = forall({primal_odes.xend},'mean');

    % solve adjoints problems
    % =======================
    % update new initial state of all adjoint problems
    for iode = adjoint_odes
        iode.x0 = -(xMend' - xt);
    end
    % solve adjoints problems with the new initial state
    solve(adjoint_odes);

    % update control
    % ===============
    % calculate mean state vector of adjoints problems
    pM = forall({adjoint_odes.x},'mean');
    pM = pM*Bm;

    % reverse adjoint variable
    pM = flipud(pM);
    % Control update
    u = primal_odes(1).u; % catch control currently
    Du = beta*u - pM;
    u = u - gamma*Du;
    % update control in primal problems
    for index = 1:K
        primal_odes(index).u = u;
    end
    % Control error
    % =============
    % Calculate area ratio  of Du^2 and u^2
    Au2   =  trapz(span,u.^2);
    ADu2  =  trapz(span,Du.^2);
    %

    error = sqrt(ADu2/Au2);
    % Save evolution
    xhistory{iter} = [ span',forall({primal_odes.x},'mean')];
    uhistory{iter} = [ span',u];
    error_history  = [ error_history, error];
end


The average control obtain is

plot(span,u)
xlabel('time');ylabel('u(t)')
format_plot(gcf)




Also, on average the objective [0 0 0] has been reached.

figure;
plot(iode.span,forall({primal_odes.x},'mean'))
xlabel('t');ylabel('x_{i}(t)')
legend(strcat('x_{',num2str((1:N)','%0.1d'),'}(t)'))
title('Evolution of cordinates of vector state.')
format_plot(gcf)




You can use the comand

animation_sol(xhistory,uhistory,'XLim',[-0.1 0.25],'ULim',[-0.5 0.0])

We can see 

If we analyze the evolution in the error, we can see that we should have stopped, in iteration 20.

plot(error_history,'-*')
title('Error Evolution')
ylabel('Error'); xlabel('Iterations')
format_plot(gcf)




References


  
    
      E. Zuazua (2014) Averaged Control. Automatica, 50 (12), p. 3077-3087. &amp;#8617;
    
  

</description>
        <pubDate>Sat, 21 Jul 2018 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.iodycon-platform-documentation/tutorials/wp01/P0001-T</link>
        <guid isPermaLink="true">https://DeustoTech.github.iodycon-platform-documentation/tutorials/wp01/P0001-T</guid>
        
        
        <category>Tutorials</category>
        
        <category>WP01</category>
        
      </item>
    
      <item>
        <title>Control of PDEs involving non-local terms</title>
        <description>Why non-local?
Relevant models in Continuum Mechanics, Mathematical Physics and Biology are of non-local nature:Cars and Viscoelasticity


  Boltzmann equations in gas dynamics. (Flanagan &amp;amp; Matsumoto, 2008)
  Navier-Stokes equations in Fluid Mechanics.
  Keller-Segel model for Chemotaxis.
  Moreover, these models are applied for the description of several complex phenomena for which a local approach is inappropriate or limiting.


Peierls-Nabarro equation in elasticity ([^fr]) (Flanagan &amp;amp; Matsumoto, 2008)
Image processing algorithms ([7])
Anomalous diffusion models ([3])
Finance: description of the pricing of American options ([8])
In this setting, classical PDE theory fails because of non-locality. Yet many of the existing techniques can be tuned and adapted, although this is often a delicate matter.



Bibliography
Flanagan, D., &amp;amp; Matsumoto, Y. (2008). The Ruby Programming Language. O’Reilly Media.
Flanagan, D., &amp;amp; Matsumoto, Y. (2008). The Rubo Programming Language. O’Reilly Media.
</description>
        <pubDate>Tue, 02 May 2017 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.iodycon-platform-documentation/posts/Control_of_PDE_non_local_terms</link>
        <guid isPermaLink="true">https://DeustoTech.github.iodycon-platform-documentation/posts/Control_of_PDE_non_local_terms</guid>
        
        <category>post</category>
        
        <category>template</category>
        
        
        <category>Posts</category>
        
      </item>
    
      <item>
        <title>New Post</title>
        <description>

SDas
</description>
        <pubDate>Tue, 19 Apr 2016 00:00:00 +0200</pubDate>
        <link>https://DeustoTech.github.iodycon-platform-documentation/documentation/New-Post</link>
        <guid isPermaLink="true">https://DeustoTech.github.iodycon-platform-documentation/documentation/New-Post</guid>
        
        <category>post</category>
        
        <category>template</category>
        
        
        <category>Documentation</category>
        
      </item>
    
  </channel>
</rss>
